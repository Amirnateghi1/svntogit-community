Index: docutils/parsers/__init__.py
===================================================================
--- docutils/parsers/__init__.py	(revision 7485)
+++ docutils/parsers/__init__.py	(working copy)
@@ -9,8 +9,8 @@
 __docformat__ = 'reStructuredText'
 
 from docutils import Component
+from docutils.utils import import_compat
 
-
 class Parser(Component):
 
     component_type = 'parser'
@@ -43,5 +43,5 @@
     parser_name = parser_name.lower()
     if parser_name in _parser_aliases:
         parser_name = _parser_aliases[parser_name]
-    module = __import__(parser_name, globals(), locals())
+    module = import_compat(parser_name, globals(), locals())
     return module.Parser
Index: docutils/parsers/rst/directives/__init__.py
===================================================================
--- docutils/parsers/rst/directives/__init__.py	(revision 7485)
+++ docutils/parsers/rst/directives/__init__.py	(working copy)
@@ -12,8 +12,8 @@
 import codecs
 from docutils import nodes
 from docutils.parsers.rst.languages import en as _fallback_language_module
+from docutils.utils import import_compat
 
-
 _directive_registry = {
       'attention': ('admonitions', 'Attention'),
       'caution': ('admonitions', 'Caution'),
@@ -109,7 +109,7 @@
         # Error handling done by caller.
         return None, messages
     try:
-        module = __import__(modulename, globals(), locals())
+        module = import_compat(modulename, globals(), locals())
     except ImportError, detail:
         messages.append(document.reporter.error(
             'Error importing directive module "%s" (directive "%s"):\n%s'
Index: docutils/parsers/rst/languages/__init__.py
===================================================================
--- docutils/parsers/rst/languages/__init__.py	(revision 7485)
+++ docutils/parsers/rst/languages/__init__.py	(working copy)
@@ -12,7 +12,7 @@
 
 __docformat__ = 'reStructuredText'
 
-from docutils.utils import normalize_language_tag
+from docutils.utils import normalize_language_tag, import_compat
 
 _languages = {}
 
@@ -21,7 +21,7 @@
         if tag in _languages:
             return _languages[tag]
         try:
-            module = __import__(tag, globals(), locals())
+            module = import_compat(tag, globals(), locals())
         except ImportError:
             continue
         _languages[tag] = module
Index: docutils/readers/__init__.py
===================================================================
--- docutils/readers/__init__.py	(revision 7485)
+++ docutils/readers/__init__.py	(working copy)
@@ -8,11 +8,10 @@
 
 __docformat__ = 'reStructuredText'
 
-
 from docutils import utils, parsers, Component
 from docutils.transforms import universal
+from docutils.utils import import_compat
 
-
 class Reader(Component):
 
     """
@@ -103,5 +102,5 @@
     reader_name = reader_name.lower()
     if reader_name in _reader_aliases:
         reader_name = _reader_aliases[reader_name]
-    module = __import__(reader_name, globals(), locals())
+    module = import_compat(reader_name, globals(), locals())
     return module.Reader
Index: docutils/writers/__init__.py
===================================================================
--- docutils/writers/__init__.py	(revision 7485)
+++ docutils/writers/__init__.py	(working copy)
@@ -13,8 +13,8 @@
 import docutils
 from docutils import languages, Component
 from docutils.transforms import universal
+from docutils.utils import import_compat
 
-
 class Writer(Component):
 
     """
@@ -130,5 +130,5 @@
     writer_name = writer_name.lower()
     if writer_name in _writer_aliases:
         writer_name = _writer_aliases[writer_name]
-    module = __import__(writer_name, globals(), locals())
+    module = import_compat(writer_name, globals(), locals())
     return module.Writer
Index: docutils/utils/__init__.py
===================================================================
--- docutils/utils/__init__.py	(revision 7485)
+++ docutils/utils/__init__.py	(working copy)
@@ -662,6 +662,15 @@
     taglist += base_tag
     return taglist
 
+def import_compat(module_name, globals_, locals_):
+    """Call __import__ in a way that is compatible with both Python 2.4 and 3.3.
+    
+    Pyhon 2.4 doesn't have the `level` argument and Python 3.3 requires it.
+    """
+    if sys.version_info <= (2,4): # `level` arg missing
+        return __import__(module_name, globals_, locals_)
+    else: # `level` arg required in Python >= 3.3
+        return __import__(module_name, globals_, locals_, level=1)
 
 class DependencyList(object):
 
Index: docutils/languages/__init__.py
===================================================================
--- docutils/languages/__init__.py	(revision 7485)
+++ docutils/languages/__init__.py	(working copy)
@@ -11,7 +11,7 @@
 
 __docformat__ = 'reStructuredText'
 
-from docutils.utils import normalize_language_tag
+from docutils.utils import normalize_language_tag, import_compat
 
 _languages = {}
 
@@ -26,7 +26,7 @@
         if tag in _languages:
             return _languages[tag]
         try:
-            module = __import__(tag, globals(), locals())
+            module = import_compat(tag, globals(), locals())
         except ImportError:
             continue
         _languages[tag] = module
@@ -35,6 +35,6 @@
         reporter.warning(
             'language "%s" not supported: ' % language_code +
             'Docutils-generated text will be in English.')
-    module = __import__('en', globals(), locals())
+    module = import_compat('en', globals(), locals())
     _languages[tag] = module # warn only one time!
     return module
