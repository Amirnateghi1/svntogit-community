Index: mcomix/archive/rarfile.py
===================================================================
--- mcomix/archive/rarfile.py	(revision 520)
+++ mcomix/archive/rarfile.py	(revision 555)
@@ -11,6 +11,13 @@
 from mcomix import callback
 from mcomix import archive
 
+if sys.platform == 'win32':
+    UNRARCALLBACK = ctypes.WINFUNCTYPE(ctypes.c_int, ctypes.c_uint,
+        ctypes.c_long, ctypes.c_long, ctypes.c_long)
+else:
+    UNRARCALLBACK = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_uint,
+        ctypes.c_long, ctypes.c_long, ctypes.c_long)
+
 class UnrarDll(object):
     """ Wrapper class for libunrar. All string values passed to this class must be unicode objects.
     In turn, all values returned are also unicode. """
@@ -43,18 +50,23 @@
 
     class _RAROpenArchiveDataEx(ctypes.Structure):
         """ Archive header structure. Used by DLL calls. """
+        _pack_ = 1
         _fields_ = [("ArcName", ctypes.c_char_p),
                       ("ArcNameW", ctypes.c_wchar_p),
                       ("OpenMode", ctypes.c_uint),
                       ("OpenResult", ctypes.c_uint),
                       ("CmtBuf", ctypes.c_char_p),
+                      ("CmtBufSize", ctypes.c_uint),
                       ("CmtSize", ctypes.c_uint),
                       ("CmtState", ctypes.c_uint),
                       ("Flags", ctypes.c_uint),
-                      ("Reserved", ctypes.c_uint * 32)]
+                      ("Callback", UNRARCALLBACK),
+                      ("UserData", ctypes.c_long),
+                      ("Reserved", ctypes.c_uint * 28)]
 
     class _RARHeaderDataEx(ctypes.Structure):
         """ Archive file structure. Used by DLL calls. """
+        _pack_ = 1
         _fields_ = [("ArcName", ctypes.c_char * 1024),
                       ("ArcNameW", ctypes.c_wchar * 1024),
                       ("FileName", ctypes.c_char * 1024),
@@ -91,11 +103,20 @@
         self._callback_function = None
         self._password = None
 
-        # Set up function prototypes
+        # Set up function prototypes.
+        # Mandatory since pointers get truncated on x64 otherwise!
         self._unrar.RAROpenArchiveEx.restype = ctypes.c_void_p
+        self._unrar.RAROpenArchiveEx.argtypes = \
+            [ctypes.POINTER(UnrarDll._RAROpenArchiveDataEx)]
         self._unrar.RARCloseArchive.restype = ctypes.c_int
+        self._unrar.RARCloseArchive.argtypes = \
+            [ctypes.c_void_p]
         self._unrar.RARReadHeaderEx.restype = ctypes.c_int
+        self._unrar.RARReadHeaderEx.argtypes = \
+            [ctypes.c_void_p, ctypes.POINTER(UnrarDll._RARHeaderDataEx)]
         self._unrar.RARProcessFileW.restype = ctypes.c_int
+        self._unrar.RARProcessFileW.argtypes = \
+            [ctypes.c_void_p, ctypes.c_int, ctypes.c_wchar_p, ctypes.c_wchar_p]
 
     def list_contents(self):
         """ Returns a list of files in the archive. """
@@ -112,7 +133,7 @@
             filelist.append(headerdata.FileNameW)
             # Skip to the next entry
             self._unrar.RARProcessFileW(handle, UnrarDll._ProcessingMode.RAR_SKIP, None, None)
-            # Read it's header
+            # Read its header
             result = self._unrar.RARReadHeaderEx(handle, ctypes.byref(headerdata))
 
         self._close(handle)
@@ -182,19 +203,12 @@
         """ Opens the rar file specified by <path> and returns its handle. """
         assert isinstance(path, unicode), "Path must be Unicode string"
 
-        archivedata = UnrarDll._RAROpenArchiveDataEx(ArcNameW=path, OpenMode=openmode)
+        self._callback_function = UNRARCALLBACK(self._password_callback)
+        archivedata = UnrarDll._RAROpenArchiveDataEx(ArcNameW=path,
+            OpenMode=openmode, Callback=self._callback_function, UserData=0)
 
         handle = self._unrar.RAROpenArchiveEx(ctypes.byref(archivedata))
         if handle:
-            if sys.platform == 'win32':
-                callback_type = ctypes.WINFUNCTYPE(ctypes.c_int, ctypes.c_uint,
-                    ctypes.c_long, ctypes.c_long, ctypes.c_long)
-            else:
-                callback_type = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_uint,
-                    ctypes.c_long, ctypes.c_long, ctypes.c_long)
-
-            self._callback_function = callback_type(self._password_callback)
-            self._unrar.RARSetCallback(handle, self._callback_function, 0)
             return handle
         else:
             errormessage = UnrarException.get_error_message(archivedata.OpenResult)
